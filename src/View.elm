module View exposing (view)

import Html exposing (Html, div, button, text, p, node, input)
import Html.Attributes exposing (class, title, type_, placeholder)
import Html.Events exposing (onClick, onInput)
import Types
    exposing
        ( Port
        , Model
        , Msg(..)
        , LabelType(..)
        )
import Port.View
import Log.View


-- import Time


gr : List (Html msg) -> Html msg
gr =
    div [ class "button-group" ]


control_view : Model -> Html Msg
control_view model =
    div [ class "control" ]
        [ button [ onClick AddPort ] [ text "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Ä—Ç" ]
        , gr
            [ button [ title "–ü–æ—Å—Ç–∞–≤–∏—Ç—å –º–µ—Ç–∫—É", onClick (AddLabel LabelRegular) ] [ text "‚úÖ" ]
            , button [ title "–ü–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ —Ö–æ—Ä–æ—à–µ–µ", class "good", onClick (AddLabel LabelGood) ] [ text "üôÇ" ]
            , button [ title "–ü–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø–ª–æ—Ö–æ–µ", class "bad", onClick (AddLabel LabelBad) ] [ text "üôÅ" ]
            ]
        , gr
            [ button [ title "–ö –ø—Ä–µ–¥—ã–¥—É—â–µ–π –º–µ—Ç–∫–µ" ] [ text "‚èÆ" ]
            , button [ title "–ö —Å–ª–µ–¥—É—é—â–µ–π –º–µ—Ç–∫–µ" ] [ text "‚è≠" ]
            ]
        , button [ title "–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ–∫—É–Ω–¥–æ–º–µ—Ä" ] [ text "‚è±" ]
        , gr
            [ button
                [ title "–û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫—É –æ–∫–Ω–∞ –ª–æ–≥–∞"
                , onClick (EnableScroll False)
                , class
                    (if model.autoscroll then
                        ""
                     else
                        "active"
                    )
                ]
                [ text "‚è∏" ]
            , button
                [ title "–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫—É –æ–∫–Ω–∞ –ª–æ–≥–∞"
                , onClick (EnableScroll True)
                , class
                    (if model.autoscroll then
                        "active"
                     else
                        ""
                    )
                ]
                [ text "‚ñ∂Ô∏è" ]
            ]
        , button [ title "–û—á–∏—Å—Ç–∏—Ç—å –æ–∫–Ω–æ –ª–æ–≥–∞", onClick ClearLog ] [ text "üöÆ" ]
        , button [ title "–î–µ—Ç–µ–∫—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç—Ä–µ–∫–µ—Ä–∞" ] [ text "üõ∞" ]
        , button [ title "–ó–∞–ø–∏—Å—å –ª–æ–≥–∞ –≤ –æ–±–ª–∞–∫–æ" ] [ text "üåç" ]
        , div [ class "find" ]
            [ text "üîç"
            , input [ type_ "input", placeholder "–ü–æ–∏—Å–∫" ] []
            , button [ title "–ù–∞–∑–∞–¥" ] [ text "üîº" ]
            , button [ title "–î–∞–ª–µ–µ" ] [ text "üîΩ" ]
            ]
        , button [ title "–ó–∞–º–µ—Ç–∫–∞" ] [ text "‚ÑπÔ∏è" ]
        , button [ title "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª", onClick SaveLogToFile ] [ text "üíæ" ]
          -- , button [ title "–û–±–Ω–∏–º–∞—à–∫–∏" ] [ text "\x1F917" ]
        , button [ title "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" ] [ text "üõ†" ]
        ]




-- resetFavicon : Cmd Msg
-- resetFavicon =
--     Cmd.map (always Noop)
--         << Task.perform Err Ok
--     <|
--         (Serial.set ("/public/images/favicon.png"))
-- fakeLog : List String
-- fakeLog =
--     List.repeat 10000 "Log"





-- log_view : Model -> Html Msg
-- log_view model =
--     div [ class "log", id "log", onScroll ChatScrolled, onScroll ChatScrolled ]
--         [ model.logs
--             |> List.foldl (\d acc -> log_row d :: acc) []
--             |> pre [ class "log" ]
--         ]




-- |> Array.toList
-- |> List.map f






debug_view : Model -> Html Msg
debug_view model =
    div [ class "debug" ]
        [ p [] [ text (toString model.ports) ]
        ]


view : Model -> Html Msg
view model =
    div [ class "workspace" ]
        [ div [ class "vertical" ]
            [ -- div [ class "header" ] [ text "–õ–æ–≥–µ—Ä 3" ]
              div [ class "toolbox" ]
                [ control_view model
                , Port.View.ports_view model model.ports
                ]
            , Log.View.log_view model
            ]
        , debug_view model
        , stylesheet model
        ]


stylesheet : Model -> Html Msg
stylesheet m =
    let
        -- tag =
        --     "link"
        --
        -- attrs =
        --     [ attribute "rel" "stylesheet"
        --     , attribute "property" "stylesheet"
        --     , attribute "href" "css.css"
        --     ]
        tag =
            "style"

        attrs =
            []

        rule p =
            "pre.log p[class^=\"port_"
                ++ (toString p.cid)
                ++ "\"] {"
                ++ "color: "
                ++ p.logColor
                ++ ";}\n"

        rules =
            m.ports
                |> List.map (\p -> rule p)
                |> String.concat
    in
        node tag
            attrs
            [ text rules ]
